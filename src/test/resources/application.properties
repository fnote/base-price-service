server.port=8082
spring.profiles.active=test

spring.main.allow-bean-definition-overriding=true

#spring actuator parameters
management.endpoint.health.show-details=always
management.endpoints.web.base-path=/ref-price/v1
management.endpoints.web.path-mapping.health=health

#database connection parameters
pricing.db.protocol=h2:tcp
pricing.db.host=localhost
pricing.db.username=root
pricing.db.password=
pricing.db.max.life.lower.limit=30000
pricing.db.max.life.upper.limit=210000
pricing.db.max.connection.create.time=5000
pricing.db.max.connection.acquire.time=6000
pricing.db.max.pool.size=20
pricing.db.initial.pool.size=10
pricing.db.connection.validation.query=SELECT 1
pricing.db.h2.file.path=/tmp/REF_PRICE_022
pricing.db.h2.file.path.windows=D:\\tmp\\h2\\REF_PRICE_022

# business units
#active.business.units=001,002,003,004,005,006,007,008,009,010,051
#active.business.units=020,021,022,023,024,025,026,027,028,029
active.business.units=020

#queries
query.get.price=\
SELECT \
paOuter.SUPC, \
paOuter.PRICE_ZONE, \
paOuter.PRICE, \
paOuter.EFFECTIVE_DATE, \
paOuter.EXPORTED_DATE, \
paOuter.CATCH_WEIGHT_INDICATOR  \
FROM \
PRICE paOuter \
INNER JOIN \
  ( \
     SELECT \
        Max(paInner.EFFECTIVE_DATE) max_eff_date, \
        paInner.SUPC, \
        paInner.PRICE_ZONE  \
     FROM \
        ( \
           SELECT \
              priceZoneOuter.SUPC, \
              priceZoneOuter.PRICE_ZONE, \
              priceZoneOuter.CUSTOMER_ID, \
              priceZoneOuter.EFFECTIVE_DATE  \
           FROM \
              PRICE_ZONE_01 priceZoneOuter  \
              INNER JOIN \
                 ( \
                    SELECT \
                       priceZoneInner.SUPC, \
                       priceZoneInner.CUSTOMER_ID, \
                       MAX(priceZoneInner.EFFECTIVE_DATE) AS MAX_EFFECTIVE_DATE  \
                    FROM \
                       PRICE_ZONE_01 priceZoneInner \
                    WHERE \
                       priceZoneInner.CUSTOMER_ID = :customerId  \
                       AND priceZoneInner.EFFECTIVE_DATE <= :effectiveDate \
                       AND SUPC IN (:supcs) \
                    GROUP BY \
                       priceZoneInner.SUPC \
                 ) \
                 t  \
                 ON t.SUPC = priceZoneOuter.SUPC  \
                 and t.MAX_EFFECTIVE_DATE = priceZoneOuter.EFFECTIVE_DATE  \
                 and t.CUSTOMER_ID = priceZoneOuter.CUSTOMER_ID \
        ) \
        pz  \
        INNER JOIN \
           PRICE paInner \
           ON pz.SUPC = paInner.SUPC  \
           AND pz.PRICE_ZONE = paInner.PRICE_ZONE  \
           AND paInner.EFFECTIVE_DATE <= :effectiveDate \
     GROUP BY \
        paInner.SUPC, \
        paInner.PRICE_ZONE \
  ) \
  c  \
  ON c.SUPC = paOuter.SUPC  \
  AND c.PRICE_ZONE = paOuter.PRICE_ZONE  \
  AND c.MAX_EFF_DATE = paOuter.EFFECTIVE_DATE

#should be an int value. This will be superseded by the requestedSupcsPerQuery query param
supcs.per.query=5
